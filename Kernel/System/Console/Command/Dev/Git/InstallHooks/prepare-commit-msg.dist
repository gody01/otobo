#!/bin/bash

# --
# OTOBO is a web-based ticketing system for service organisations.
# --
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# Copyright (C) 2019-2020 Rother OSS GmbH, https://otobo.de/
# --
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# --

# This script prepares the git commit message.
# When the current git branch is recognised as an issue branch then
# the commit message is prepended with 'Issue <ISSUE_NAME:'.
# Examples for issue branch names are:
#   issue-#513-prepare_commit_msg
#   issue-rotheross/otobo#513-prepare_commit_msg
#   issue-RotherOSS/otobo-docker#1-example
#   issue-RotherOSS/otobo-docker#2-x

# git calls this script with the arguments: COMMIT_MSG_FILE, COMMIT_SOURCE, SHA1.
# Here only COMMIT_MSG_FILE and COMMIT_SOURCE are needed.
COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# read inital messages
commit_content=$(cat $COMMIT_MSG_FILE)

# find out which branch we are on
branch_name=$(git rev-parse --abbrev-ref HEAD)

# For now we mess only with interactive commits, that is when $COMMIT_SOURCE is empty.
# Do nothing unless the issue can be extracted from the git branch name.
issue_regex='^issue-(.*#[0-9]+)-[^-]+'
if [[ $COMMIT_SOURCE == '' ]] && [[ $branch_name =~ $issue_regex ]]
then
    # Prepend the issue to the commit message.
    echo "Issue ${BASH_REMATCH[1]}:${commit_content}" > $COMMIT_MSG_FILE
fi
